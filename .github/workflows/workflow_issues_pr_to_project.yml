name: add issues/pr to project
on:
  workflow_call:
    inputs:
      node_id:
        required: true
        type: string
      status:
        required: false
        type: string
        default: New
      org:
        required: true
        type: string
      project:
        required: true
        type: number
      login:
        type: string
        required: true
      label:
        type: string
        required: false
        default: "Customer issue"
      label_status:
        type: string
        required: false
        default: "Todo"
      repository:
        type: string
        required: true
    secrets:
      token:
        required: true
jobs:
  add_issue_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ORGANIZATION: ${{ inputs.org }}
          PROJECT_NUMBER: ${{ inputs.project }}
          STATUS: ${{ inputs.status }}
          LABEL_STATUS: ${{ inputs.label_status }}
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectNext(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_OPTION_ID='$(jq --arg STATUS "$STATUS" '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$STATUS) |.id' project_data.json) >> $GITHUB_ENV
          echo 'LABEL_STATUS_OPTION_ID='$(jq --arg LABEL_STATUS "$LABEL_STATUS" '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name==$LABEL_STATUS) |.id' project_data.json) >> $GITHUB_ENV
      - name: Add Issue/PR to project
        env:
          GITHUB_TOKEN: ${{secrets.token}}
          NODE_ID: ${{ inputs.node_id }}
        run: |
          item_id="$( gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation($project:ID!, $node:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $node}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f node=$NODE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      - name: Get date
        run: echo "DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Set fields
        env:
          GITHUB_TOKEN: ${{secrets.token}}
        run: |
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
              set_date_posted: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: $date_value
              }) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.STATUS_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent
      - name: Get user org data
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ORGANIZATION: ${{ inputs.org }}
          LOGIN: ${{ inputs.login }}
        run: |
          gh api graphql -f query='
            query($org:String!, $login:String!) { 
              user(login:$login) { 
                login
                organization(login:$org) {
                  login
                }
              }
            }' -f org=$ORGANIZATION -f login=$LOGIN > user_org_data.json
          echo 'ORG_USER='$(jq -r '.data.user.organization.login' user_org_data.json) >> $GITHUB_ENV
      - name: Get repository data
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          ORGANIZATION: ${{ inputs.org }}
          REPOSITORY: ${{ inputs.repository }}
          LABEL: ${{ inputs.label }}
        run: |
          gh api graphql -f query='
            query($org:String!, $repository:String!, $label:String!) { 
              repository(owner:$org, name:$repository) { 
                label(name:$label) {
                  id  
                }
              }
            }' -f org=$ORGANIZATION -f repository=$REPOSITORY  -f label="${LABEL}" > project_data.json
          echo 'LABEL_ID='$(jq '.data.repository.label.id' project_data.json) >> $GITHUB_ENV

      - name: Add label to issue
        if: ${{ env.ORG_USER != inputs.org }}
        env:
          ORGANIZATION: ${{ inputs.org }}
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          gh api graphql -f query='
            mutation(
              $label: ID!,
              $item: ID!
            ) {
              addLabelsToLabelable(input: {
                labelIds: $label,
                labelableId: $item
              }) { clientMutationId }
            }' -f label=${{ env.LABEL_ID }} -f item=${{ inputs.node_id }} --silent
          gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.LABEL_STATUS_OPTION_ID }} --silent
            
